#!/usr/bin/env ruby
# encoding: utf-8

require 'rubygems'
require 'getoptlong'
require 'simple-password-gen'

length = (9..11)
number = 3
GetoptLong.new(
  ['--length', '-l', GetoptLong::REQUIRED_ARGUMENT],
  ['--number', '-n', GetoptLong::REQUIRED_ARGUMENT],
  ['--help',   '-h', GetoptLong::NO_ARGUMENT]
).each do |opt,arg|
  case opt
  when '--length'
    l = arg.to_i
    if l < 5
      puts "Srsly?"
      exit 1
    end
    length = Range.new(l - 1, l + 1)
  when '--number'
    number = arg.to_i
    if number < 1
      puts "Srsly?"
      exit 1
    end
  when '--help'
    puts "#{$0} [--length/-l LEN] [--number/-n NUM]"
    puts "\tGenerates <NUM> password(s) with appox. length <LEN>."
    puts "\tWill fail if n is less than 1 or len is less than 5."
    puts "\tDefaults: LEN=10, NUM=3"
    exit
  end
end

columns = {
  pronounceable:  "Pronounceable",
  random:         "Random",
  urlsafe:        "URL safe",
}

generator = Password.new(length)
header    = columns.values
passwords = (0...number).map { columns.keys.map{|k| generator.send(k) } }
markup    = " %*s  |  %*s  |  %*s "

widths = passwords.each_with_object(header.map(&:size)) {|pws, max|
  (0...max.size).each {|i|
    max[i] = pws[i].size if pws[i].size > max[i]
  }
}.map{|w| -w }

puts markup % widths.zip(header).flatten
print "-", widths.map{|w| "-" * -w }.join("--+--"), "-\n"

passwords.each do |list|
  puts markup % widths.zip(list).flatten
end
